#BlueJ class context
comment0.params=title
comment0.target=Room(java.lang.String)
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Room\r\n\ \r\n\ @param\ title\ \ \ \ \ Title\ of\ the\ Room\ object\ as\ a\ String.\r\n
comment1.params=s\ d\ initState
comment1.target=Room(java.util.Scanner,\ Dungeon,\ boolean)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Room\r\n\ \r\n\ @param\ s\ \ \ \ \ \ \ \ \ \ Scanner\ object\ to\ work\ with\ /\ handed\ focus\ from\ Dungeon\ Class.\r\n\ @param\ d\ \ \ \ \ \ \ \ \ \ Dungeon\ object\ to\ work\ with.\r\n\ @param\ initState\ \ Tells\ room\ whether\ to\ add\ Items\ to\ Room\ object's\ ArrayList,\ or\ to\ hold\ off\ until\ hydration\ from\ save\ file.\r\n
comment10.params=item
comment10.target=void\ add(Item)
comment10.text=\r\n\ Adds\ an\ item\ to\ the\ roomItems\ array\ list.\r\n\ \r\n\ @param\ item\ \ \ \ \ \ Item\ object\ to\ add\ to\ Room's\ ArrayList\ as\ a\ Item\ Object.\r\n
comment11.params=item
comment11.target=void\ remove(Item)
comment11.text=\r\n\ Removes\ an\ item\ from\ the\ roomItems\ array\ list.\r\n\ \r\n\ @param\ item\ \ \ \ \ \ Item\ object\ to\ remove\ from\ Room's\ ArrayList\ as\ a\ Item\ Object.\r\n
comment12.params=
comment12.target=java.util.ArrayList\ getRoomItems()
comment12.text=\r\n\ \r\n
comment13.params=
comment13.target=boolean\ containsNpc()
comment13.text=\r\n\ Checks\ to\ see\ if\ there\ is\ a\ NPC\ object\ in\ the\ room.\r\n\ \r\n\ @return\ \ \ \ \ \ False\ if\ no\ NPC\ in\ the\ Room's\ ArrayList.\ True\ if\ NPC\ found\ in\ room.\r\n
comment14.params=npc
comment14.target=void\ addNpc(Denizen)
comment14.text=\r\n\ Add\ Denizen\ object\ to\ this\ Room's\ ArrayList.\r\n\ \r\n\ @param\ npc\ \ \ \ \ \ \ Denizen\ object\ to\ add\ to\ ArrayList\ as\ Denizen\ object.\r\n
comment15.params=npc
comment15.target=void\ removeNpc(Denizen)
comment15.text=\r\n\ Remove\ Denizen\ object\ from\ this\ Room's\ ArrayList\r\n\ \r\n\ @param\ npc\ \ \ \ \ \ \ Denizen\ object\ to\ remove\ from\ Room's\ ArrayList\ as\ Denizen\ Object.\ \r\n
comment16.params=key
comment16.target=void\ unlockExit(java.lang.String)
comment16.text=\r\n\ Unlocks\ the\ door\ based\ on\ the\ key\ given\r\n\ \r\n\ @param\ key\ \ \ String\ name\ of\ the\ item\ that\ unlocks\ the\ exit\r\n
comment2.params=
comment2.target=java.lang.String\ getTitle()
comment2.text=\r\n\ Returns\ room\ title.\r\n\ \r\n\ @return\ \ \ \ \ \ Returns\ Room\ title\ as\ a\ String.\r\n
comment3.params=desc
comment3.target=void\ setDesc(java.lang.String)
comment3.text=\r\n\ Sets\ the\ room's\ description.\r\n\ \r\n\ @param\ desc\ \ \ \ \ \ Description\ of\ Room\ object\ as\ a\ String.\r\n
comment4.params=
comment4.target=java.lang.String\ getDesc()
comment4.text=\r\n\ Gets\ the\ room's\ description.\r\n\ \r\n\ @return\ \ \ \ \ \ Room\ object's\ description\ as\ a\ String.\r\n
comment5.params=dir
comment5.target=Room\ leaveBy(java.lang.String)
comment5.text=\r\n\ Attempts\ to\ move\ from\ one\ room\ to\ another\ room.\ If\ a\ direction\ is\ found\ in\ the\ room's\ arraylist\ of\ exits,\ then\ a\ Room\ objet\ is\ sent\ back.\ Else,\ null\ is\ returned\r\n\ \r\n\ @param\ dir\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Direction\ to\ attempt\ to\ exit\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Destination\ to\ exit\ to\ as\ a\ Room\ object.\ Null\ if\ there\ isn't\ an\ exit\ in\ the\ specified\ direction\r\n\ @throws\ InterruptedException\ \ \ \ \ Pushes\ IO\ exception\ up\ the\ stack\r\n
comment6.params=
comment6.target=java.lang.String\ describe()
comment6.text=\r\n\ Describes\ the\ room.\r\n\ \r\n\ @return\ \ \ \ \ \ Only\ room\ title\ is\ printed\ to\ screen,\ if\ room\ has\ been\ visited.\ If\ room\ has\ not\ been\ visited,\ both\ title\ and\ description\ are\ returned.\ Current\ room\ is\ marked\ as\ visited.\r\n
comment7.params=exit
comment7.target=void\ addExit(Exit)
comment7.text=\r\n\ Adds\ an\ Exit\ to\ the\ current\ room.\r\n\ \r\n\ @param\ exit\ \ \ \ \ \ Exit\ object\ to\ be\ added\ to\ current\ room.\r\n
comment8.params=w
comment8.target=void\ storeState(java.io.PrintWriter)
comment8.text=\r\n\ Persistence\ method\ to\ write\ to\ save\ file.\ Currently\ checks\ if\ the\ room\ has\ been\ visited,\ if\ there\ are\ items\ in\ the\ room,\ and\ if\ there\ are\ NPCs\ in\ the\ room\r\n\ \r\n\ @param\ w\ \ \ \ \ \ PrintWriter\ object\ to\ work\ with\ /\ handed\ focus\ from\ Dungeon\ Class.\r\n
comment9.params=r
comment9.target=void\ restoreState(java.util.Scanner)
comment9.text=\r\n\ Hydration\ method\ to\ restore\ game\ from\ save\ file.\ \r\n\ \r\n\ @param\ r\ \ \ \ \ \ Scanner\ Object\ to\ work\ with\ /\ handed\ focus\ from\ GameState\ Class.\r\n
numComments=17
